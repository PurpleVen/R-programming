library(shiny)
library(leaflet)
## leafletOutput is used at the ui side to display the rendered map.
shinyUI(fluidPage(
leafletOutput("mymap")
))
runApp()
library(shiny); runApp('Varanasi.R')
library(shiny)
library(shinythemes)
library(leaflet)
# Define UI
ui <- fluidPage(theme = shinytheme("cerulean"),
navbarPage(
# theme = "cerulean",  # <--- To use a theme, uncomment this
"My first app",
tabPanel("Map",
sidebarPanel(
tags$h3("Garbage Levels:"),
selectInput(inputId = "Landmark",
label = "Choose The Level You Want To Check",
list("High", "Medium", "Low"))
),
), # Navbar 1, tabPanel
tabPanel("Navbar 2", "This panel is intentionally left blank"),
tabPanel("Navbar 3", "This panel is intentionally left blank")
) ,# navbarPage
mainPanel(
h1("Header 1"),
shinyUI(fluidPage(
leafletOutput("mymap")
)))
) # fluidPage
# Define server function
shinyServer <- function(input, output) {
output$txtout <- renderText({
paste( input$txt1, input$txt2, sep = " " )
})
output$mymap <- renderLeaflet({
# define the leaflet map object
leaflet() %>%
addTiles() %>%
setView(lng = 82.9739, lat = 25.3176 , zoom = 15) %>%
addMarkers(lng = 82.9739, lat = 25.3176, popup = "Varanasi, Uttar Pradesh India") # uncomment following if want to have a pop up %>%
# addPopups(lng = 78.0419, lat = 27.1750, popup = "Taj Mahal, Agra, India")
})
} # server
# Create Shiny object
shinyApp(ui = shinyUI, server = shinyServer)
View(shinyServer)
library(shiny)
library(shinythemes)
library(leaflet)
# Define UI
ui <- fluidPage(theme = shinytheme("cerulean"),
navbarPage(
# theme = "cerulean",  # <--- To use a theme, uncomment this
"My first app",
tabPanel("Map",
sidebarPanel(
tags$h3("Garbage Levels:"),
selectInput(inputId = "Landmark",
label = "Choose The Level You Want To Check",
list("High", "Medium", "Low"))
),
), # Navbar 1, tabPanel
tabPanel("Navbar 2", "This panel is intentionally left blank"),
tabPanel("Navbar 3", "This panel is intentionally left blank")
) ,# navbarPage
mainPanel(
h1("Header 1"),
shinyUI(fluidPage(
leafletOutput("mymap")
)))
) # fluidPage
# Define server function
shinyServer <- function(input, output) {
# output$txtout <- renderText({
#   paste( input$txt1, input$txt2, sep = " " )
# })
output$mymap <- renderLeaflet({
# define the leaflet map object
leaflet() %>%
addTiles() %>%
setView(lng = 82.9739, lat = 25.3176 , zoom = 15) %>%
addMarkers(lng = 82.9739, lat = 25.3176, popup = "Varanasi, Uttar Pradesh India") # uncomment following if want to have a pop up %>%
# addPopups(lng = 78.0419, lat = 27.1750, popup = "Taj Mahal, Agra, India")
})
} # server
# Create Shiny object
shinyApp(ui = shinyUI, server = shinyServer)
runApp('Varanasi.R')
library(shiny)
library(shinythemes)
library(leaflet)
# Define UI
ui <- fluidPage(theme = shinytheme("cerulean"),
navbarPage(
# theme = "cerulean",  # <--- To use a theme, uncomment this
"My first app",
tabPanel("Map",
sidebarPanel(
tags$h3("Garbage Levels:"),
selectInput(inputId = "Landmark",
label = "Choose The Level You Want To Check",
list("High", "Medium", "Low"))
),
), # Navbar 1, tabPanel
tabPanel("Navbar 2", "This panel is intentionally left blank"),
tabPanel("Navbar 3", "This panel is intentionally left blank")
) ,# navbarPage
mainPanel(
h1("Header 1"),
shinyUI(fluidPage(
leafletOutput("mymap")
)))
) # fluidPage
# Define server function
shinyServer <- function(input, output) {
output$txtout <- renderText({
paste( input$txt1, input$txt2, sep = " " )
})
output$mymap <- renderLeaflet({
# define the leaflet map object
leaflet() %>%
addTiles() %>%
setView(lng = 82.9739, lat = 25.3176 , zoom = 15) %>%
addMarkers(lng = 82.9739, lat = 25.3176, popup = "Varanasi, Uttar Pradesh India") # uncomment following if want to have a pop up %>%
# addPopups(lng = 78.0419, lat = 27.1750, popup = "Taj Mahal, Agra, India")
})
} # server
# Create Shiny object
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(leaflet)
# Define UI
ui <- fluidPage(theme = shinytheme("cerulean"),
navbarPage(
# theme = "cerulean",  # <--- To use a theme, uncomment this
"My first app",
tabPanel("Map",
sidebarPanel(
tags$h3("Garbage Levels:"),
selectInput(inputId = "Landmark",
label = "Choose The Level You Want To Check",
list("High", "Medium", "Low"))
),
), # Navbar 1, tabPanel
tabPanel("Navbar 2", "This panel is intentionally left blank"),
tabPanel("Navbar 3", "This panel is intentionally left blank")
) ,# navbarPage
mainPanel(
h1("Header 1"),
shinyUI(fluidPage(
leafletOutput("mymap")
)))
) # fluidPage
# Define server function
server <- function(input, output) {
output$txtout <- renderText({
paste( input$txt1, input$txt2, sep = " " )
})
output$mymap <- renderLeaflet({
# define the leaflet map object
leaflet() %>%
addTiles() %>%
setView(lng = 82.9739, lat = 25.3176 , zoom = 15) %>%
addMarkers(lng = 82.9739, lat = 25.3176, popup = "Varanasi, Uttar Pradesh India") # uncomment following if want to have a pop up %>%
# addPopups(lng = 78.0419, lat = 27.1750, popup = "Taj Mahal, Agra, India")
})
} # server
# Create Shiny object
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(leaflet)
# Define UI
ui <- fluidPage(theme = shinytheme("cerulean"),
navbarPage(
# theme = "cerulean",  # <--- To use a theme, uncomment this
"My first app",
tabPanel("Map",
sidebarPanel(
tags$h3("Garbage Levels:"),
selectInput(inputId = "Landmark",
label = "Choose The Level You Want To Check",
list("High", "Medium", "Low"))
),
), # Navbar 1, tabPanel
tabPanel("Navbar 2", "This panel is intentionally left blank"),
tabPanel("Navbar 3", "This panel is intentionally left blank")
) ,# navbarPage
mainPanel(
h1("Header 1"),
shinyUI(fluidPage(
leafletOutput("mymap")
)))
) # fluidPage
# Define server function
server <- function(input, output) {
output$txtout <- renderText({
paste( input$txt1, input$txt2, sep = " " )
})
output$mymap <- renderLeaflet({
# define the leaflet map object
leaflet() %>%
addTiles() %>%
setView(lng = 82.9739, lat = 25.3176 , zoom = 15) %>%
addMarkers(lng = 82.9739, lat = 25.3176, popup = "Varanasi, Uttar Pradesh India") # uncomment following if want to have a pop up %>%
# addPopups(lng = 78.0419, lat = 27.1750, popup = "Taj Mahal, Agra, India")
})
} # server
# Create Shiny object
shinyApp(ui = ui, server = server)
runApp('Varanasi.R')
runApp('Varanasi.R')
